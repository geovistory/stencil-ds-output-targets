import path from 'path';
import type { CompilerCtx, ComponentCompilerMeta, Config } from '@stencil/core/internal';
import type { OutputTargetAngular, PackageJSON } from './types';
import { relativeImport, normalizePath, sortBy, readPackageJson, dashToPascalCase, getCustomElementsDir, flattenImportCollection } from './utils';
import { createComponentDefinition } from './component/generate-angular-component';
import { generateAngularDirectivesFile } from './generate-angular-directives-file';
import generateValueAccessors from './generate-value-accessors';
import { ImportCollection } from './component/types';
import { setComponentNamespaceImport } from './component/utils/set-component-namespace-import';

export async function angularDirectiveProxyOutput(
  compilerCtx: CompilerCtx,
  outputTarget: OutputTargetAngular,
  components: ComponentCompilerMeta[],
  config: Config,
) {
  const filteredComponents = getFilteredComponents(outputTarget.excludeComponents, components);
  const rootDir = config.rootDir as string;
  const pkgData = await readPackageJson(config, rootDir);

  const finalText = generateProxies(
    filteredComponents,
    pkgData,
    outputTarget,
    config.rootDir as string,
  );

  await Promise.all([
    compilerCtx.fs.writeFile(outputTarget.directivesProxyFile, finalText),
    copyResources(config, outputTarget),
    generateAngularDirectivesFile(compilerCtx, filteredComponents, outputTarget),
    generateValueAccessors(compilerCtx, filteredComponents, outputTarget, config),
  ]);
}

/**
 * Returns a filtered list of components excluding component tag selectors
 * that have been referenced in the `excludeComponents` array.
 */
function getFilteredComponents(excludeComponents: string[] = [], cmps: ComponentCompilerMeta[]) {
  return sortBy(cmps, (cmp) => cmp.tagName).filter(
    (c) => !excludeComponents.includes(c.tagName) && !c.internal,
  );
}

async function copyResources(config: Config, outputTarget: OutputTargetAngular) {
  if (!config.sys || !config.sys.copy || !config.sys.glob) {
    throw new Error('stencil is not properly initialized at this step. Notify the developer');
  }
  const srcDirectory = path.join(__dirname, '..', 'angular-component-lib');
  const destDirectory = path.join(
    path.dirname(outputTarget.directivesProxyFile),
    'angular-component-lib',
  );

  return config.sys.copy(
    [
      {
        src: srcDirectory,
        dest: destDirectory,
        keepDirStructure: false,
        warn: false,
      },
    ],
    srcDirectory,
  );
}

export function generateProxies(
  components: ComponentCompilerMeta[],
  pkgData: PackageJSON,
  outputTarget: OutputTargetAngular,
  rootDir: string,
) {
  const distTypesDir = path.dirname(pkgData.types);
  const dtsFilePath = path.join(rootDir, distTypesDir, 'components.d.ts');
  const componentsTypeFile = relativeImport(outputTarget.directivesProxyFile, dtsFilePath, '.d.ts');

  const angularCoreImports = ['ChangeDetectionStrategy', 'ChangeDetectorRef', 'Component', 'ElementRef', 'EventEmitter', 'NgZone'];

  if (outputTarget.singleComponentAngularModules) {
    // If we are generating SCAM modules, we need to import the `NgModule` decorator.
    // The generated Angular modules will rely on `CommonModule`.
    angularCoreImports.push('NgModule', 'CommonModule');
  }

  const imports: ImportCollection = {};
  const typeImports: ImportCollection = {};

  imports['@angular/core'] = angularCoreImports;

  setComponentNamespaceImport(outputTarget, componentsTypeFile, {
    modules: imports,
    types: typeImports,
  });

  if (outputTarget.includeImportCustomElements) {
    if (outputTarget.componentCorePackage !== undefined) {
      for (const { tagName } of components) {
        const defineCustomElementFn = `define${dashToPascalCase(tagName)}`;
        const filePath = `${normalizePath(outputTarget.componentCorePackage!)}/${getCustomElementsDir(outputTarget.customElementsDir)}/${tagName}.js`;
        imports[filePath] = [`defineCustomElement as ${defineCustomElementFn}`];
      }
    }
  }

  imports['./angular-component-lib/utils'] = ['ProxyCmp', 'proxyOutputs'];

  const componentClasses = components.map(createComponentDefinition(
    outputTarget,
    {
      modules: imports,
      types: typeImports
    }
  ));

  const final: string[] = [
    `/*
 * This file is auto-generated by @stencil/angular-output-target.
 * Any changes you make to this file will be overwritten.
 */`,
    flattenImportCollection(imports),
    flattenImportCollection(typeImports, { useTypeImport: true }),
    componentClasses.join('\n')
  ];

  return final.join('\n') + '\n';
}

